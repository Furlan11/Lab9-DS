# -*- coding: utf-8 -*-
"""Lab9DS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pyjx9k8N7zBLrrnsRYUYVa6ZMMl7YBvw
"""

import pandas as pd
import matplotlib.pyplot as plt

# Cargar los datos de temperatura global
temp_data_path = 'GLB.Ts+dSST.csv'
temp_data = pd.read_csv(temp_data_path)

# Convertir los datos y extraer la columna 'Year' y el promedio anual 'J-D'
import pandas as pd
import matplotlib.pyplot as plt

# Cargar los datos de temperatura global y ajustar las columnas
temp_data_path = 'GLB.Ts+dSST.csv'
temp_data = pd.read_csv(temp_data_path, skiprows=1)

# Renombrar columnas para mayor claridad
temp_data.columns = ['Year', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'J-D', 'D-N', 'DJF', 'MAM', 'JJA', 'SON']

# Convertir 'Year' y 'J-D' a numérico, manejando valores no numéricos como NaN
temp_data['Year'] = pd.to_numeric(temp_data['Year'], errors='coerce')
temp_data['J-D'] = pd.to_numeric(temp_data['J-D'], errors='coerce')

# Eliminar filas con valores nulos en 'Year' o 'J-D' para evitar problemas en la gráfica
temp_data = temp_data.dropna(subset=['Year', 'J-D'])

# Graficar la tendencia de temperatura promedio anual
plt.figure(figsize=(12, 6))
plt.plot(temp_data['Year'], temp_data['J-D'], label='Promedio Anual (J-D)', color='orange')

# Mejorar la visualización
plt.title('Tendencia de la Temperatura Global Anual')
plt.xlabel('Año')
plt.ylabel('Temperatura Anual (°C)')
plt.legend()
plt.grid(True)

# Mostrar la gráfica
plt.show()

"""Objetivo: Visualizar la tendencia de la temperatura global a lo largo del tiempo y observar posibles patrones de calentamiento.

Decisión: Se utilizó una gráfica de líneas para resaltar los cambios anuales en la temperatura promedio, lo cual facilita identificar aumentos o disminuciones en la tendencia general.

Observaciones: La tendencia de temperatura muestra un aumento gradual, indicando un posible efecto de calentamiento global.
"""

# Cargar los datos de títulos de Netflix
netflix_data_path = 'netflix_titles.csv'
netflix_data = pd.read_csv(netflix_data_path)

# Contar la cantidad de títulos por tipo
type_counts = netflix_data['type'].value_counts()

# Graficar la distribución de películas y series
plt.figure(figsize=(8, 6))
type_counts.plot(kind='bar', color=['blue', 'orange'])

# Mejorar la visualización
plt.title('Distribución de Títulos de Netflix (Películas vs. Series)')
plt.xlabel('Tipo de Contenido')
plt.ylabel('Cantidad de Títulos')
plt.xticks(rotation=0)

# Mostrar la gráfica
plt.show()

"""Objetivo: Analizar la proporción de películas frente a series en el catálogo de Netflix.

Decisión: Se utilizó un gráfico de barras para comparar las cantidades de cada tipo de contenido, ya que es una representación visual directa y efectiva para mostrar proporciones.

Observaciones: El gráfico muestra que las películas son más comunes que las series en el catálogo de Netflix, lo cual puede tener implicaciones para la audiencia que prefiere uno u otro tipo de contenido.
"""

# Cargar los datos de ventas
sales_data_path = 'train.csv'
sales_data = pd.read_csv(sales_data_path)

# Calcular las ventas por categoría de producto
category_sales = sales_data.groupby('Category')['Sales'].sum()

# Graficar las ventas por categoría
plt.figure(figsize=(10, 6))
category_sales.plot(kind='bar', color=['green', 'blue', 'purple'])

# Mejorar la visualización
plt.title('Ventas Totales por Categoría de Producto')
plt.xlabel('Categoría de Producto')
plt.ylabel('Ventas Totales (USD)')
plt.xticks(rotation=0)

# Mostrar la gráfica
plt.show()

"""Objetivo: Visualizar el total de ventas por categoría de producto para identificar las categorías con mayor contribución a las ventas.

Decisión: Se utilizó un gráfico de barras para facilitar la comparación entre categorías, permitiendo observar cuáles son las más rentables de un vistazo.

Observaciones: La categoría con mayor volumen de ventas se destaca, lo que indica dónde se centra la demanda de los clientes. Esto puede ayudar en decisiones de inventario y enfoque de marketing.

Ejerciios adicionales
"""

# Importar las bibliotecas necesarias
import pandas as pd
import matplotlib.pyplot as plt

# Cargar el archivo de datos
data_path = 'Depuracion(ventas unitarias).csv'
data = pd.read_csv(data_path)

# Convertir la columna 'Fecha' en un formato de fecha reconocible para Python
data['Fecha'] = pd.to_datetime(data['Fecha'], format='%b-%y')

# Configurar la gráfica de líneas para ventas reales y planificadas
plt.figure(figsize=(12, 6))
plt.plot(data['Fecha'], data['Ventas Reales (unidades)'], label='Ventas Reales (unidades)', marker='o')
plt.plot(data['Fecha'], data['Ventas planificadas (unidades)'], label='Ventas Planificadas (unidades)', marker='x')

# Mejorar la visualización
plt.title('Tendencia de Ventas Reales y Planificadas')
plt.xlabel('Fecha')
plt.ylabel('Unidades')
plt.legend()
plt.grid(True)

# Mostrar la gráfica
plt.show()

# Convertir la columna 'Fecha' en un formato de fecha reconocible para Python
data['Fecha'] = pd.to_datetime(data['Fecha'], format='%b-%y')

# Calcular la diferencia entre ventas reales y planificadas
data['Diferencia'] = data['Ventas Reales (unidades)'] - data['Ventas planificadas (unidades)']

# Configuración de la gráfica con colores distintos para valores positivos y negativos
plt.figure(figsize=(12, 6))
colors = ['green' if diff > 0 else 'red' for diff in data['Diferencia']]

# Crear la gráfica de barras con colores según el valor de la diferencia
plt.bar(data['Fecha'], data['Diferencia'], color=colors, label='Diferencia (Real - Planificado)')
plt.axhline(0, color='black', linestyle='--', linewidth=0.8)  # Línea base en cero para fácil comparación

# Mejorar la visualización
plt.title('Diferencia entre Ventas Reales y Planificadas (Optimizada)')
plt.xlabel('Fecha')
plt.ylabel('Diferencia de Unidades')
plt.grid(True, linestyle='--', alpha=0.5)

# Añadir leyenda personalizada para distinguir ventas superiores e inferiores a lo planificado
plt.legend(['Supera lo planificado', 'Menor a lo planificado'], loc='upper left')

# Mostrar la gráfica
plt.show()

# Convertir la columna 'Fecha' en un formato de fecha reconocible para Python
data['Fecha'] = pd.to_datetime(data['Fecha'], format='%b-%y')

# Crear una figura con una escala manipulada para ventas reales
plt.figure(figsize=(12, 6))
plt.plot(data['Fecha'], data['Ventas Reales (unidades)'], label='Ventas Reales (unidades)', marker='o')

# Ajuste de escala para crear un efecto engañoso
plt.ylim(42000000, 51000000)  # Escala estrecha para exagerar los cambios

# Títulos y etiquetas
plt.title('Ventas Reales (Escala Engañosa)')
plt.xlabel('Fecha')
plt.ylabel('Unidades')
plt.legend()
plt.grid(True)

# Mostrar la gráfica engañosa
plt.show()

"""Escala Manipulada: Limitamos el rango del eje Y a valores entre 42,000,000 y 51,000,000. Esto hace que variaciones pequeñas parezcan más grandes, exagerando la percepción de cambios.
Problema Ético: La manipulación de la escala puede hacer que los datos parezcan más variables de lo que realmente son. Esto puede ser engañoso y llevar a decisiones incorrectas, especialmente si la gráfica se usa en presentaciones de negocios o en medios.

"""

# Crear una figura para ventas reales y planificadas con principios de proximidad y similitud
plt.figure(figsize=(12, 6))

# Gráfica de líneas para ventas reales y planificadas con colores y marcadores distintos
plt.plot(data['Fecha'], data['Ventas Reales (unidades)'], label='Ventas Reales', marker='o', color='blue')
plt.plot(data['Fecha'], data['Ventas planificadas (unidades)'], label='Ventas Planificadas', marker='x', color='orange')

# Mejorar la visualización
plt.title('Ventas Reales vs. Planificadas con Principios de la Gestalt')
plt.xlabel('Fecha')
plt.ylabel('Unidades')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

# Mostrar la gráfica
plt.show()

"""
Proximidad: Ambas líneas se muestran en la misma gráfica, facilitando la comparación directa entre ventas reales y planificadas.

Similitud: Usamos colores y marcadores distintos para distinguir claramente cada tipo de venta, reduciendo la carga cognitiva y mejorando la comprensión.
"""

# Calcular la diferencia entre ventas reales y planificadas
data['Diferencia'] = data['Ventas Reales (unidades)'] - data['Ventas planificadas (unidades)']

# Definir colores y tamaños para los puntos de interés
colores_reales = ['green' if diff > 0 else 'red' for diff in data['Diferencia']]
tamano_puntos = [50 if abs(diff) > 1000000 else 30 for diff in data['Diferencia']]  # Tamaño mayor para diferencias significativas

# Crear la figura
plt.figure(figsize=(12, 6))

# Ventas reales con atributos de color y tamaño en los puntos de interés
plt.scatter(data['Fecha'], data['Ventas Reales (unidades)'], color=colores_reales, s=tamano_puntos, label='Ventas Reales')

# Ventas planificadas con un estilo diferente para diferenciar visualmente
plt.plot(data['Fecha'], data['Ventas planificadas (unidades)'], label='Ventas Planificadas', marker='x', color='blue', linestyle='--')

# Mejorar la visualización
plt.title('Ventas Reales y Planificadas usando Atributos Preatentivos')
plt.xlabel('Fecha')
plt.ylabel('Unidades')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)

# Mostrar la gráfica
plt.show()

"""Color: Usamos verde para resaltar meses con ventas reales superiores y rojo para ventas inferiores a lo planificado.
Tamaño: Aumentamos el tamaño de los puntos en meses con diferencias significativas (por encima de 1,000,000 unidades).
Forma: Usamos diferentes formas y estilos (puntos para ventas reales y una línea discontinua con cruces para ventas planificadas) para facilitar la distinción.
"""